name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        default: 'v1.0.0'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build and Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: skillcapped-generator.exe
            asset_name: skillcapped-generator-windows-x64.exe
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: skillcapped-generator
            asset_name: skillcapped-generator-linux-x64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: skillcapped-generator
            asset_name: skillcapped-generator-macos-x64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Install winresource dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # winresource is already in Cargo.toml build-dependencies

    - name: Build release
      run: cargo build --release --target ${{ matrix.target }}

    - name: Rename artifact
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} ${{ matrix.asset_name }}
        else
          cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} ${{ matrix.asset_name }}
          chmod +x ${{ matrix.asset_name }}
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.asset_name }}
        path: ${{ matrix.asset_name }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: SkillCapped Generator ${{ github.ref }}
        body: |
          ## SkillCapped Generator Release

          ðŸŽ® **Features:**
          - Beautiful terminal UI with colorful styling
          - Battle.net ID validation with real-time feedback
          - Support for both Classic and Retail WoW versions
          - One-click clipboard integration (Ctrl+C)
          - Quick GitHub access (Ctrl+G)
          - Cross-platform support (Windows, macOS, Linux)

          ## Downloads:
          - **Windows**: `skillcapped-generator-windows-x64.exe`
          - **Linux**: `skillcapped-generator-linux-x64`
          - **macOS**: `skillcapped-generator-macos-x64`

          ## Usage:
          1. Download the appropriate binary for your platform
          2. Run the executable
          3. Enter your Battle.net ID (format: `Name#1234`)
          4. Use Tab to switch versions, Ctrl+C to copy codes

          **Made by Xerrion** - [GitHub](https://github.com/Xerrion)
        draft: false
        prerelease: false

    - name: Upload Windows Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: skillcapped-generator-windows-x64.exe/skillcapped-generator-windows-x64.exe
        asset_name: skillcapped-generator-windows-x64.exe
        asset_content_type: application/octet-stream

    - name: Upload Linux Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: skillcapped-generator-linux-x64/skillcapped-generator-linux-x64
        asset_name: skillcapped-generator-linux-x64
        asset_content_type: application/octet-stream

    - name: Upload macOS Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: skillcapped-generator-macos-x64/skillcapped-generator-macos-x64
        asset_name: skillcapped-generator-macos-x64
        asset_content_type: application/octet-stream
