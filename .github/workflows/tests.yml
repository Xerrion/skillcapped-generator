name: Tests

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: read

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust-version: [stable, nightly]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: ${{ matrix.rust-version }}
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target/
        key: ${{ runner.os }}-cargo-build-${{ matrix.rust-version }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-build-${{ matrix.rust-version }}-
          ${{ runner.os }}-cargo-build-

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run tests
      run: cargo test --verbose --all-features

    - name: Run integration tests
      run: cargo test --test integration_tests --verbose

    - name: Build release
      run: cargo build --release

    - name: Test binary execution
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          timeout 5 ./target/release/skillcapped-generator.exe --help || true
        else
          timeout 5 ./target/release/skillcapped-generator --help || true
        fi

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable
        components: llvm-tools-preview

    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-llvm-cov

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ubuntu-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ubuntu-cargo-

    - name: Generate Coverage Report
      run: |
        cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: lcov.info

  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: [test, coverage]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

    - name: Download coverage reports
      uses: actions/download-artifact@v4
      with:
        name: coverage-reports

    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v5
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable

    - name: Install cargo-audit
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-audit

    - name: Run security audit
      run: cargo audit

  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust MSRV
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: nightly

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: msrv-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Check MSRV compatibility
      run: cargo check --all-features --all-targets

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test, coverage, sonarqube, security, msrv]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        echo "Test Results Summary:"
        echo "- Test Suite: ${{ needs.test.result }}"
        echo "- Coverage: ${{ needs.coverage.result }}"
        echo "- SonarQube: ${{ needs.sonarqube.result }}"
        echo "- Security: ${{ needs.security.result }}"
        echo "- MSRV: ${{ needs.msrv.result }}"
        echo ""
        echo "üìä Code Coverage: Codecov and SonarQube reports generated"
        echo "üîç Quality Gates: SonarQube analysis completed"
        echo "üõ°Ô∏è  Security: Dependency audit completed"
        
        if [[ "${{ needs.test.result }}" != "success" || "${{ needs.coverage.result }}" != "success" || "${{ needs.sonarqube.result }}" != "success" || "${{ needs.security.result }}" != "success" || "${{ needs.msrv.result }}" != "success" ]]; then
          echo "‚ùå Some checks failed!"
          exit 1
        else
          echo "‚úÖ All checks passed!"
        fi
